//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Database.Models.FileManagement
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class FileManagementEntities : DbContext
    {
        public FileManagementEntities()
            : base("name=FileManagementEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<FilesCategory> FilesCategory { get; set; }
        public virtual DbSet<Modules> Modules { get; set; }
        public virtual DbSet<RepositoryPermissions> RepositoryPermissions { get; set; }
        public virtual DbSet<UserFilesPermissions> UserFilesPermissions { get; set; }
        public virtual DbSet<UsersModules> UsersModules { get; set; }
        public virtual DbSet<UsersRepositoryPermissions> UsersRepositoryPermissions { get; set; }
    
        public virtual ObjectResult<GetAllApprovalsFiles_Result> GetAllApprovalsFiles(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllApprovalsFiles_Result>("GetAllApprovalsFiles", userIDParameter);
        }
    
        public virtual ObjectResult<GetAllFileActionsLog_Result> GetAllFileActionsLog()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllFileActionsLog_Result>("GetAllFileActionsLog");
        }
    
        public virtual ObjectResult<GetAllInboxFiles_Result> GetAllInboxFiles(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllInboxFiles_Result>("GetAllInboxFiles", userIDParameter);
        }
    
        public virtual ObjectResult<GetAllReminderDatesOnUserID_Result> GetAllReminderDatesOnUserID(Nullable<int> userID, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllReminderDatesOnUserID_Result>("GetAllReminderDatesOnUserID", userIDParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<GetAllRepositoryFiles_Result> GetAllRepositoryFiles(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllRepositoryFiles_Result>("GetAllRepositoryFiles", userIDParameter);
        }
    
        public virtual ObjectResult<GetAllUserListHaveFileAccess_Result> GetAllUserListHaveFileAccess(Nullable<int> fileId, Nullable<int> fileCategoryId, Nullable<int> userId)
        {
            var fileIdParameter = fileId.HasValue ?
                new ObjectParameter("fileId", fileId) :
                new ObjectParameter("fileId", typeof(int));
    
            var fileCategoryIdParameter = fileCategoryId.HasValue ?
                new ObjectParameter("fileCategoryId", fileCategoryId) :
                new ObjectParameter("fileCategoryId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllUserListHaveFileAccess_Result>("GetAllUserListHaveFileAccess", fileIdParameter, fileCategoryIdParameter, userIdParameter);
        }
    
        public virtual ObjectResult<GetAllUsersForFileApproval_Result> GetAllUsersForFileApproval(Nullable<int> fileId, Nullable<int> fileCategoryId, Nullable<int> userId)
        {
            var fileIdParameter = fileId.HasValue ?
                new ObjectParameter("fileId", fileId) :
                new ObjectParameter("fileId", typeof(int));
    
            var fileCategoryIdParameter = fileCategoryId.HasValue ?
                new ObjectParameter("fileCategoryId", fileCategoryId) :
                new ObjectParameter("fileCategoryId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllUsersForFileApproval_Result>("GetAllUsersForFileApproval", fileIdParameter, fileCategoryIdParameter, userIdParameter);
        }
    
        public virtual ObjectResult<GetFileInfoOnFileID_Result> GetFileInfoOnFileID(Nullable<int> fileID, Nullable<int> userID)
        {
            var fileIDParameter = fileID.HasValue ?
                new ObjectParameter("FileID", fileID) :
                new ObjectParameter("FileID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetFileInfoOnFileID_Result>("GetFileInfoOnFileID", fileIDParameter, userIDParameter);
        }
    
        public virtual ObjectResult<GetSecionFieldsAndValues_Result> GetSecionFieldsAndValues(Nullable<int> fileID, Nullable<int> userID)
        {
            var fileIDParameter = fileID.HasValue ?
                new ObjectParameter("FileID", fileID) :
                new ObjectParameter("FileID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSecionFieldsAndValues_Result>("GetSecionFieldsAndValues", fileIDParameter, userIDParameter);
        }
    }
}
