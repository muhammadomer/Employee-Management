//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Database.Models.EmployeeManagement
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class DentonsEmployeesEntities : DbContext
    {
        public DentonsEmployeesEntities()
            : base("name=DentonsEmployeesEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Applications> Applications { get; set; }
        public virtual DbSet<Cities> Cities { get; set; }
        public virtual DbSet<Countries> Countries { get; set; }
        public virtual DbSet<Country> Country { get; set; }
        public virtual DbSet<DentonsEmployeesSettings> DentonsEmployeesSettings { get; set; }
        public virtual DbSet<Departments> Departments { get; set; }
        public virtual DbSet<Location> Location { get; set; }
        public virtual DbSet<PracticeGroups> PracticeGroups { get; set; }
        public virtual DbSet<Regions> Regions { get; set; }
        public virtual DbSet<UsersApplications> UsersApplications { get; set; }
        public virtual DbSet<UserTypes> UserTypes { get; set; }
        public virtual DbSet<Users> Users { get; set; }
    
        public virtual ObjectResult<GetAllUserApplications_Result> GetAllUserApplications(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllUserApplications_Result>("GetAllUserApplications", userIDParameter);
        }
    
        public virtual int DeleteConfiguration(string filter, string riskManagerDB, string id)
        {
            var filterParameter = filter != null ?
                new ObjectParameter("Filter", filter) :
                new ObjectParameter("Filter", typeof(string));
    
            var riskManagerDBParameter = riskManagerDB != null ?
                new ObjectParameter("RiskManagerDB", riskManagerDB) :
                new ObjectParameter("RiskManagerDB", typeof(string));
    
            var idParameter = id != null ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteConfiguration", filterParameter, riskManagerDBParameter, idParameter);
        }
    }
}
